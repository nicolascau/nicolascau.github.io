---
layout: post
title:  "Comment se mettre Ã  GitHub Pages et Jekyll ?"
date:   2019-01-17 14:00:00 +0100
categories: [Configuration]
tags: [GitHub Pages, Jekyll]
description: "Si comme moi, vous avez envie de monter votre blog sans vous compliquer la vie, ce mini-tutoriel est pour vous. Il vous prÃ©sentera en quelques actions comment mettre en place un blog en sâ€™appuyant sur du dÃ©jÃ  tout prÃªt. A savoir :"
description_questions: ["GitHub pour lâ€™hÃ©bergement des sources", "GitHub Pages pour lâ€™accessibilitÃ© du site Web", "Jekyll pour la mise en place dâ€™un blog structurÃ© en quelques clics"]
---
{% include post_header.html %}

A vos claviers !

# Introduction
Depuis quelques semaines, jâ€™ai eu envie de me mettre en place un blog. Non pas que jâ€™ai envie de vous raconter ma vie. NÃ©anmoins, je me dis que câ€™est une faÃ§on de capitaliser mes connaissances dâ€™informaticien. Je serais donc mon premier lecteur (câ€™est dÃ©jÃ  Ã§a ðŸ˜‰) !

Mon besoin est donc simple :
* Disposer dâ€™un site Web sans me soucier de la faÃ§on de lâ€™hÃ©berger
* Disposer dâ€™un blog structurÃ© et trÃ¨s facile Ã  configurer/modifier/adapter
Et si vous me suivez, vous arriverez Ã  ceci :
 
![Mon blog Jekyll](/assets/2019-01-17-comment-se-mettre-a-github-pages-et-jekyll/01.png)

Superbe, nâ€™est-ce pas ?


# PrÃ©requis
Pour commencer tout cela, je me suis dÃ©jÃ  crÃ©Ã© un compte GitHub. Sans compte GitHub, vous nâ€™irez pas plus loin. Pour crÃ©er votre compte, dirigez-vous sur [Github](https://github.com/).
Ensuite, jâ€™ai aussi besoin que vous ayez quelques connaissances :
* Sur Git
* Sur GitHub (mais bon si vous y avez dÃ©jÃ  un compte, câ€™est surement le cas)
* Sur le format Markdown (mais vraiment un tout petit peu)

Je base aussi mes explications sur un environnement Windows.

â€ƒ
# 1. 1Ã¨re Ã©tape : GitHub Pages pour hÃ©berger
[GitHub Pages]( https://pages.github.com/) est un service dâ€™hÃ©bergement de site statique. Il prÃ©sente lâ€™avantage dâ€™Ãªtre directement connectÃ© Ã  votre repository GitHub. GrÃ¢ce Ã  ce systÃ¨me, vous pouvez crÃ©er des sites Web.

Deux points sont Ã  conserver en tÃªte lors de sa mise en place :
* GitHub Pages est limitÃ© (pas de langages cÃ´tÃ© serveur, des limites de taille de repo., des limites de bande passante, etc.) Nâ€™espÃ©rez donc pas hÃ©berger votre site en production sur ce repository.
* Un site GitHub Pages est visible en public sur le net. Nâ€™allez donc pas y intÃ©grer des donnÃ©es sensibles.

Vous trouverez plus dâ€™information sur les limitations et le fonctionnement des Github Pages sur [la documentation officielle](https://help.github.com/articles/what-is-github-pages/).

Pour mettre en place un hÃ©bergement de type GitHub Pages, procÃ©dez aux actions suivantes :
1. CrÃ©ez un repository GitHub intitulÃ© de la forme `username.github.io` (oÃ¹ `username` correspond Ã  votre login GitHub
> Warning : Attention, si vous ne respectez pas prÃ©cisÃ©ment cette syntaxe, cela ne fonctionnera pas.

2. TÃ©lÃ©chargez et installez [GitHub Desktop](https://desktop.github.com/) (mais vous pouvez trÃ¨s bien le faire en ligne de commande)
3. Clonez votre repository via le menu `File > Clone Repository` en y prÃ©cisant cette adresse : https://github.com/username/username.github.io
4. Sauvez votre projet

Ã‡a y est vous disposez dâ€™un espace de stockage pour votre blog.
Pour le tester, rien de plus simple :

1.	CrÃ©ez avec un Ã©diteur (dans mon cas [Visual Studio Code](https://code.visualstudio.com/)) un fichier `index.html`
> Warning : Par dÃ©faut, sous Windows, votre repository sera situÃ© ici : C:\Users\username\Documents\GitHub\username.github.io
Vous pouvez donc enregistrer ce fichier sous ce chemin.

2.	Inscrire dans le fichier le contenu suivant :
``` HTML
    <!DOCTYPE html>
    <html>
        <body>
            <h1>Mon titre</h1>
            <p>Mon blog sera lÃ .</p>
        </body>
    </html>
```

3.	Le fichier apparaÃ®t alors sous GitHub Desktop dans la partie `changed files`. Vous pouvez entrer un commentaire de commit et cliquer sur `Commit to master` puis `Fetch origin`.
> Warning : Il va falloir que vous patientiez quelques dizaines de secondes pour voir apparaÃ®tre votre travail sur Internet.

4.	Ouvrez un navigateur Web et entrez lâ€™adresse suivante : https://username.github.io.

Ã‡a y est, vous avez votre site disponible sur Internet ! Vous pouvez retrouver lâ€™ensemble de ces Ã©tapes dÃ©taillez [ici](https://pages.github.com/).
Passons maintenant Ã  lâ€™Ã©tape suivante : intÃ©grer un site avec Jekyll.


# 2. 2Ã¨me Ã©tape : Bloguer avec Jekyll
[Jekyll]( https://jekyllrb.com/) est une faÃ§on de crÃ©er votre site statique sous le format que jâ€™appellerais Â« blog Â». GrÃ¢ce Ã  ce systÃ¨me, vous pouvez Ã©crire ainsi vos billets au format Markdown et les intÃ©grer rapidement.

Pourquoi utiliser Jekyll plutÃ´t quâ€™autre chose ? Jâ€™utilise Jekyll pour plusieurs raisons :
* La raison essentielle est que GitHub le met en avant. La compatibilitÃ© Jekyll est donc assurÃ©e au sein dâ€™un hÃ©bergement de type GitHub Pages.
* Format dâ€™article Markdown : un langage de balisage permettant la rÃ©utilisation des articles sous 
* SimplicitÃ© de mise en place et de mise Ã  jour

Vous trouverez plus dâ€™information sur [la documentation officielle]( https://jekyllrb.com/docs/).

Pour le mettre en place, suivez les actions suivantes :
1. Installer un environnement de dÃ©veloppement Ruby
> Pas de panique, pour lâ€™installer, il vous suffit de suivre ce qui est prÃ©cisÃ© dans [ce guide dâ€™installation sous Windows](https://jekyllrb.com/docs/installation/windows/).

 * TÃ©lÃ©chargez `Ruby+Devkit` et suivez lâ€™installation pas Ã  pas

> Warning : Dans mon cas, je me base sur lâ€™installeur `Ruby+Devkit 2.5.3.1 (x64)` qui est la version recommandÃ©e du moment.

 * AprÃ¨s installation, une invite de commande va se lancer, sÃ©lectionnez le mode dâ€™installation numÃ©ro 1. Celui-ci vous permettra ensuite dâ€™utiliser la commande `gem`.

2. A la fin de lâ€™installation, sÃ©lectionnez `Start Command Prompt with Ruby` dans le menu des applications Windows. Une invite de commande se lance.
3. ProcÃ©dez Ã  lâ€™installation de Jekyll avec la ligne de commande `gem install jekyll bundler`
4. A la fin de lâ€™installation, vÃ©rifez sa bonne installation avec la ligne de commande `jekyll -v`

Jekyll est maintenant installÃ© sur votre poste, il ne vous reste plus quâ€™Ã  lâ€™utiliser.

Passons maintenant Ã  lâ€™Ã©tape suivante : rÃ©aliser son premier site avec Jekyll.
â€ƒ

# 3. 3Ã¨me Ã©tape : RÃ©aliser son premier site avec Jekyll
Maintenant que Jekyll est installÃ©, nous allons crÃ©er notre premier site en quelques commandes. Je ne vais donc pas Ãªtre exhaustif et parcourir volontairement les grandes lignes. Le reste pourra Ãªtre Ã©tudiÃ© plus en profondeur au sein de [la documentation officielle]( https://jekyllrb.com/docs/).


Jâ€™ai dÃ©cidÃ© volontairement de ne pas crÃ©er le site directement au sein de la copie locale de mon repository GitHub. Je rÃ©alise donc ensuite des copies locales lorsque jâ€™obtiens une version que je juge satisfaisante de mon site.
Je vais donc vous dÃ©crire ce mode opÃ©ratoire :
1. Ouvrez une invite de commande et se placer dans le rÃ©pertoire racine oÃ¹ vous souhaitez y dÃ©poser votre site localement :
cd C:\Developpement
2. CrÃ©ez un nouveau site Jekyll prÃ©configurÃ© `jekyll new monsite`

> Warning : Vous disposez dÃ©sormais dâ€™un rÃ©pertoire `monsite` au sein de votre rÃ©pertoire racine. Celui-ci contient votre site statique.

3.	DÃ©placez vous dans le rÃ©pertoire de votre nouveau site `cd monsite`
4.	Construisez le site et dÃ©ployez le localement `bundle exec jekyll serve`
5.	Ouvrez un navigateur Web et entrez lâ€™adresse suivante : https://localhost:4000/

> Warning : Vous avez votre site Jekyll en local. Vous pouvez retrouver lâ€™ensemble de ces Ã©tapes dÃ©taillez [ici]( https://jekyllrb.com/docs/).

6.	Pour le mettre sur votre hÃ©bergement GitHub Pages, il vous suffit de copier le contenu de votre rÃ©pertoire monsite/ et de le coller dans votre repository local `username.github.io`.
7.	Les fichiers apparaissent alors sous GitHub Desktop dans la partie `changed files`. Vous pouvez entrer un commentaire de commit et cliquer sur `Commit to master` puis `Fetch origin`.

Ã‡a y est, vous avez maintenant un site fonctionnel accessible sur votre espace GitHub Pages.

Passons maintenant Ã  lâ€™Ã©tape suivante : configurer son site Jekyll.

â€ƒ
# 4. 4Ã¨me Ã©tape : Le b.a.-ba pour configurer son site Jekyll
Vous disposez dÃ©sormais dâ€™un site Jekyll et vous voulez donc le configurer et le customiser. Je vais vous donner ici quelques pistes pour le faire. Je dÃ©couperais mon explication en 3 thÃ©matiques :
* Comment configurer votre site ?
* Comment ajouter des posts ?
* RedÃ©ployer son site

Vous trouverez plus dâ€™information sur [la documentation officielle]( https://jekyllrb.com/docs/).


## 4.1. Comment configurer votre site ?
A la racine de votre site, vous trouverez un fichier `_config.yml`. Vous pouvez librement y Ã©diter, entre autres :
* Le titre de votre site via la balise `title`
* La description de votre site via la balise `description`
* Un lien vers votre compte GitHub avec la balise `github_username`
* Etant une page du site et non un post, ce fichier Ã  une disposition (layout) de type `page`

Vous pouvez modifier votre page `A propos` par lâ€™intermÃ©diaire du fichier `about.md`. Celui-ci est au format Markdown.

> Warning : Un conseil, pour vous familiariser avec la syntaxe Markdown, le mieux est dâ€™essayer de customiser et dâ€™en voir les effets. 

Vous pouvez accÃ©der Ã  la documentation sur la syntaxe et le principe des pages Jekyll [ici](https://jekyllrb.com/docs/pages/).


## 4.2. Comment ajouter des posts ?
Comment vous pouvez le voir Ã  lâ€™initialisation de votre site, celui-ci dispose dâ€™un post sâ€™intitulant `Welcome to Jekyll`. Celui-ci se situe dans le rÃ©pertoire `_posts` et se trouve dans le fichier `AAAA-MM-dd-welcome-to-jekyll.markdown`. Il se compose, entre autres, des Ã©lÃ©ments suivants :
* Un titre de post via la balise `title`
* Une date de parution via la balise `date`
* Un dÃ©tail du post situÃ© aprÃ¨s la ligne `---`
* Etant un post du site et non une page Ã  proprement parlÃ©, ce fichier Ã  une disposition (layout) de type `post`

Chaque ajout dâ€™un nouveau fichier Markdown au sein du rÃ©pertoire `_post` crÃ©era un nouveau post au sein de votre site.
> Warning : Un conseil, pour vous familiariser avec la syntaxe Markdown, le mieux est dâ€™essayer de customiser et dâ€™en voir les effets. 

Vous pouvez accÃ©der Ã  la documentation sur la syntaxe et le principe des posts Jekyll [ici](https://jekyllrb.com/docs/posts/).


## 4.3. DÃ©ployer son site
AprÃ¨s avoir rÃ©alisÃ© des modifications, il vous est nÃ©cessaire de regÃ©nÃ©rer votre site Jekyll. La gestion de votre site Jekyll passe par quelques lignes de commande (mais rien de trÃ¨s sorcier).
Deux commandes sont Ã  retenir :

`jekyll serve`

Utile pour construire votre site Ã  partir du moment oÃ¹ lâ€™un de vos fichiers sources Ã  Ã©tÃ© modifiÃ©. Le site est alors visible localement Ã  lâ€™adresse suivante : https://localhost:4000/

`jekyll build`

Utile pour gÃ©nÃ©rer votre site pour lâ€™environnement de Production. Typiquement, lorsque vous pensez disposer dâ€™une version satisfaisante Ã  mettre en ligne, vous pouvez la lancer puis rÃ©cupÃ©rer le contenu du dossier `_site` et le dÃ©ployer sur votre environnement GitHub Pages.

Le reste pourra Ãªtre Ã©tudiÃ© plus en profondeur au sein du [rÃ©fÃ©rentiel des commandes utiles]( https://jekyllrb.com/docs/usage/)
â€ƒ

# Conclusion
Vous avez appris grÃ¢ce Ã  ce billet Ã  configurer votre environnement GitHub Pages, y crÃ©er un site grÃ¢ce Ã  Jekyll et dÃ©couvert les quelques notions de base pour le configurer.

Cela nâ€™exclue Ã©videmment pas un tour sur la documentation officielle pour aller plus loin dans votre utilisation de Jekyll. NÃ©anmoins, cela vous rend autonome Ã  a mise en place dâ€™un site basique mais modulaire et tout Ã§a trÃ¨s rapidement.